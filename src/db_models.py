from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()


class GenerationRequestDb(db.Model):
    # Autogenerated
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.DateTime, default=datetime.now)

    # Position data
    url = db.Column(db.String(500), nullable=False)
    job_title = db.Column(db.String(255), nullable=True)
    company = db.Column(db.String(255), nullable=True)
    missions = db.Column(db.String(2000), nullable=True)
    tasks = db.Column(db.String(2000), nullable=True)
    skills = db.Column(db.String(2000), nullable=True)
    experience = db.Column(db.String(2000), nullable=True)
    recruiters = db.Column(db.String(2000), nullable=True)
    location = db.Column(db.String(2000), nullable=True)
    contract_type = db.Column(db.String(2000), nullable=True)
    start_date = db.Column(db.String(2000), nullable=True)
    salary = db.Column(db.String(2000), nullable=True)
    benefits = db.Column(db.String(2000), nullable=True)

    # Generated cover letter
    cover_letter = db.Column(db.String(2000), nullable=True)

    def __repr__(self):
        return "<Task %r>" % self.id


class UserDb(db.Model):
    id = db.Column(db.Integer, primary_key=True)

    # Details
    first_name = db.Column(db.String(100), nullable=True)
    surname = db.Column(db.String(100), nullable=True)
    email = db.Column(db.String(255), nullable=True)
    phone_number = db.Column(db.String(20), nullable=True)
    address = db.Column(db.String(255), nullable=True)
    city = db.Column(db.String(255), nullable=True)
    postal_code = db.Column(db.Integer, nullable=True)
    country = db.Column(db.String(255), nullable=True)

    # Data containing user's data in each language
    data = db.relationship("DataDb", backref="user", lazy=True)

    def to_dict(self):
        return {
            "details": {
                "first_name": self.first_name,
                "surname": self.surname,
                "email": self.email,
                "phone_number": self.phone_number,
                "address": self.address,
                "city": self.city,
                "postal_code": self.postal_code,
                "country": self.country,
            },
            "profiles": {

            }
        }

    def __repr__(self):
        return "<Task %r>" % self.id


class DataDb(db.Model):
    language = db.Column(db.String(255), primary_key=True)  # ID
    user_id = db.Column(db.Integer, db.ForeignKey('user_db.id'), nullable=False)

    title = db.Column(db.Text(255), nullable=True)
    description = db.Column(db.Text(2000), nullable=True)
    color = db.Column(db.String(7), nullable=False, default="#ff0000")

    links = db.relationship("LinkDb", backref="data", lazy=True)
    languages = db.relationship("LanguageDb", backref="data", lazy=True)
    additional_skills = db.relationship("AdditionalSkillDb", backref="data", lazy=True)
    educations = db.relationship("EducationDb", backref="data", lazy=True)
    experiences = db.relationship("ExperienceDb", backref="data", lazy=True)


class LinkDb(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    data_language = db.Column(db.String, db.ForeignKey("data_db.language"), nullable=False)
    link = db.Column(db.String(255), nullable=False)

    def __repr__(self):
        return f"<Link {self.link} for User {self.user_id}>"


class LanguageDb(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    data_language = db.Column(db.String, db.ForeignKey("data_db.language"), nullable=False)
    language = db.Column(db.String(255), nullable=False)

    def __repr__(self):
        return f"<Language {self.language} for data {self.data_language}>"


class AdditionalSkillDb(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    data_language = db.Column(db.String, db.ForeignKey("data_db.language"), nullable=False)
    additional_skill = db.Column(db.String(255), nullable=False)

    def __repr__(self):
        return f"<additional_skill {self.additional_skill} for data {self.data_language}>"


class EducationDb(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    data_language = db.Column(db.String, db.ForeignKey("data_db.language"), nullable=False)
    education = db.Column(db.String(2000), nullable=False)


class ExperienceDb(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    data_language = db.Column(db.String, db.ForeignKey("data_db.language"), nullable=False)
    experience = db.Column(db.String(2000), nullable=False)